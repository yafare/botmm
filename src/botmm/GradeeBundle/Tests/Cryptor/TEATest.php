<?php


namespace Cryptor;


use botmm\GradeeBundle\Oicq\Cypher\Cryptor;
use botmm\GradeeBundle\Oicq\Tools\Hex;
use botmm\GradeeBundle\Tests\Tlv\TlvTestCase;

class TEATest extends TlvTestCase
{

    public function testDec001()
    {
        $data = "
cf e8 d6 98 b0 ab 00 96 e1 a4 26
e8 98 3d 54 c5 aa 8c 6c ab 48 78 78 2d 2e cc 6d
29 9d 4e 38 fa b2 5c 87 f5 1c 50 67 51 1e 77 fe
94 e2 f6 c6 86 
";
        //$key = '00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00';
        //$key  = '7d1ffc96239d17a236f122d2b497a300';//sharekey
        //$key = '74ccb6a8c92f95de435fa9c329f2c816';//md5_2+uin 123456789
        //$key = md5(md5('thirstyzebra', true).hex2bin('00000000002bc065'));//md5_2+uin 12345678
        $key = md5(md5('123456', true).hex2bin('00000000002bc065'));//md5_2+uin 12345678
        //$key = 'cf 2c 33 2a 1b af 36 d0 34 9f ab 27 ac 0b 29 2c';//tmp 009 tgtgt
        //$key  = '66 6f 55 bc 4d 6b 3a 34 6c f4 b0 b1 b4 b9 6c a9';
        $key = '67 24 2e 42 35 55 74 55 44 62 67 73 3c 38 66 58';
        $key = '3f 25 4b 0e 79 39 59 32 55 30 9b 31 d0 ba d5 82';

        $str    = Hex::HexStringToBin($data);
        $result = Cryptor::decrypt($str, 0, strlen($str), Hex::HexStringToBin($key));


        $this->assertBinEqualsHex("0c", $result, "should equal");
    }

    public function testGzinflate()
    {
        $source   = Hex::HexStringToBin
        $composed = gzcompress($source, -1, ZLIB_ENCODING_DEFLATE);
        $composed2 = gzencode($source, -1, FORCE_DEFLATE);
        $this->assertEquals($composed, $composed2);
        //print_r(Hex::BinToHexString($composed));
        //$uncomposed = gzuncompress($composed);
        //print_r(Hex::BinToHexString($uncomposed));

        $str = Hex::HexStringToBin("
        78 9c a5 52 cb 6e c2 30 10 fc 15 64 f5 88 82 df
        d8 5c 51 0f 95
        da 43 ab de 0a aa 12 62 a8 45 5e c5 06 8a 10 9f 56 f5 93
        fa 0b dd 75 e8 01 89 4b d5 28 91 67 d7 33 bb b3
        ab 1c 49 de 75 af c1 af c8 84 7c 7f 7d c2 7b 0b
        df 4d 0f f7 4f fb d9 96 52 a6 fb b0 e9 0f 32 4c
        9a 06 14 8b b6 ce a2 6b 16 ae 89 59 dd 16 be 72
        ef ef 70 dd 06 b8 e3 00 8a 9d db 00 d4 99 c8 58
        c6 ac 15 e9 f2 75 07 39 99 c9 0c 29 a5 0f 50 2b
        af 1d e4 1e 1f 51 13 7d 0a 38 f4 9d 8d 18 9f 8d
        b8 19 30 31 51 74 22 93 c0 ed fc 02 09 0f 77 03
        79 ff 7c 7b b6 b3 4b 7d 74 66 21 5e 07 5f 42 68
        97 5c 9b 5c 17 8a 33 f8 84 28 f3 62 b9 54 f9 d2
        14 4e 31 2b 15 30 ab 10 c9 e4 e5 48 c2 b6 80 22
        a0 51 62 4c a5 1d 73 de 97 85 0c d3 00 37 21 32
        c0 b4 87 fc 0c 81 50 79 ac 00 24 8a 0f e7 48 76
        75 ee 2b 9c c0 e8 b1 a0 0c 32 21 e6 9b 44 93 46
        0b ab 0d 47 97 6d 97 96 33 7d 98 4e b1 56 8c 10
        d1 21 d9 fa e6 42 bb 0d 0e 87 91 56 42 10 0f 1d
        8e 5e b5 2b 60 0d f1 4c f6 f7 39 3a c5 ed 76 6d
        6a 84 ee 60 26 44 1f d8 6b d1 36 cd 39 fd d6 26
        c7 38 49 e5 30 39 46 5d e3 7e 65 e7 7e 02 d7 e3
        bb 9e 19 7a a6 a5 06 6b d5 65 aa 6b 58 ea 82 b6
        c9 e5 5e e2 e6 90 d0 69 f8 4f 6b 4c d9 ab e6 98
        30 57 dc 31 f5 37 77 f3 d3 1c 18 e5 3a fd 3b 8a
        9c 7e 00 2c 9e db 4a
        ");

        //$bin = gzinflate($str);
        //
        $bin = gzuncompress($str);
        print_r($bin);
        print_r(Hex::BinToHexString($bin));

    }
}